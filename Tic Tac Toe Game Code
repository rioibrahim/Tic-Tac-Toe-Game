<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Tic Tac Two</title>
    <style>
  body {
    margin: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  iframe {
    width: 100%;
    height: 100%;
    transform: rotate(90deg); /* Rotate 90 degrees to potrait */
    transform-origin: center center;
  }
</style>
    <style>
        :root {
            --red: #ff6b6b;
            --blue: #4ecdc4;
            --dark-blue: #3a7bd5;
            --yellow: #ffe66d;
            --purple: #a55eea;
            --dark: #4a4a4a;
            --light: #f8f9fa;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, var(--dark-blue) 0%, #00d2ff 100%);
            overflow: auto;
            touch-action: manipulation;
            padding: 10px;
            box-sizing: border-box;
        }
        
        .game-title {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 15px 0;
            background: linear-gradient(to right, var(--red) 0%, var(--blue) 100%);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .rgb-text {
            animation: rgbAnimation 5s linear infinite;
            background: linear-gradient(90deg, var(--red), var(--blue), var(--yellow), var(--purple));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            background-size: 300% 100%;
        }
        
        @keyframes rgbAnimation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .main-menu, .difficulty-menu, .game-container, .bot-difficulty-menu {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 95%;
            max-width: 350px;
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            margin: 10px 0;
        }
        
        .game-screen {
            display: none;
            width: 95%;
            max-width: 350px;
            flex-direction: column;
            align-items: center;
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            margin: 10px 0;
        }
        
        .game-info {
            text-align: center;
            margin: 5px 0;
            font-size: 1.1rem;
            font-weight: bold;
            color: var(--dark);
        }
        
        .status {
            margin: 5px 0;
            font-size: 1.1rem;
            font-weight: bold;
            color: var(--dark);
            height: 30px;
            text-align: center;
        }
        
        .score-container {
            display: flex;
            justify-content: space-around;
            width: 100%;
            margin: 10px 0;
            font-size: 1.2rem;
            font-weight: bold;
        }
        
        .score {
            padding: 5px 15px;
            border-radius: 20px;
            color: white;
        }
        
        .score-x {
            background: linear-gradient(to right, var(--red), #ff8e8e);
        }
        
        .score-o {
            background: linear-gradient(to right, var(--blue), #a5dff9);
        }
        
        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 10px;
            width: 100%;
            max-width: 280px;
            height: 280px;
            margin: 10px auto;
        }
        
        .cell {
            background-color: white;
            border-radius: 15px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 48px;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
            position: relative;
        }
        
        .cell:active {
            transform: scale(0.95);
        }
        
        .cell.x::before, .cell.x::after {
            content: '';
            position: absolute;
            width: 80%;
            height: 8px;
            background-color: var(--red);
            border-radius: 5px;
        }
        
        .cell.x::before {
            transform: rotate(45deg);
        }
        
        .cell.x::after {
            transform: rotate(-45deg);
        }
        
        .cell.o::before {
            content: '';
            position: absolute;
            width: 60%;
            height: 60%;
            border-radius: 50%;
            border: 8px solid var(--blue);
        }
        
        .cell.empty:hover {
            background-color: #f0f0f0;
            transform: translateY(-3px);
        }
        
        .winning-cell {
            animation: pulse 1s infinite;
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.7);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.03); }
            100% { transform: scale(1); }
        }
        
        .btn {
            margin: 8px;
            padding: 12px 20px;
            font-size: 16px;
            color: white;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
            outline: none;
            width: 200px;
            max-width: 100%;
            text-align: center;
        }
        
        .btn-primary {
            background: linear-gradient(to right, var(--red), var(--blue));
        }
        
        .btn-secondary {
            background: linear-gradient(to right, #556270, #4ecdc4);
        }
        
        .btn-danger {
            background: linear-gradient(to right, #ff6b6b, #ff8e8e);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }
        
        .btn:active {
            transform: translateY(1px);
        }
        
        .btn-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 15px 0;
            width: 100%;
        }
        
        .confetti {
            position: absolute;
            width: 8px;
            height: 8px;
            background-color: var(--red);
            border-radius: 50%;
            animation: fall 3s linear forwards;
        }
        
        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
        
        .credit {
            margin-top: auto;
            margin-bottom: 10px;
            width: 100%;
            text-align: center;
            font-size: 14px;
            color: var(--dark);
            padding: 0 20px;
        }
        
        .credit p:not(.rgb-text) {
            color: var(--dark);
        }
        
        .difficulty-btn {
            margin: 6px;
            padding: 10px 16px;
            font-size: 14px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 180px;
            max-width: 100%;
            color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .easy {
            background: linear-gradient(to right, #4ecdc4, #a5dff9);
        }
        
        .medium {
            background: linear-gradient(to right, #ffe66d, #feca57);
        }
        
        .hard {
            background: linear-gradient(to right, #ff9ff3, #f368e0);
        }
        
        .nightmare {
            background: linear-gradient(to right, #ff6b6b, #ee5253);
        }
        
        .difficulty-title {
            font-size: 1.2rem;
            margin: 5px 0 15px 0;
            color: var(--dark);
            text-align: center;
            font-weight: bold;
        }
        
        .play-btn-container {
            margin-top: auto;
            margin-bottom: 10px;
            width: 100%;
            display: flex;
            justify-content: center;
        }
        
        .bot-difficulty-menu .btn-group {
            margin-top: 10px;
        }
        
        @media (max-width: 400px) {
            .game-title {
                font-size: 2rem;
            }
            
            .board {
                height: 250px;
            }
            
            .cell {
                font-size: 40px;
            }
            
            .btn, .difficulty-btn {
                width: 180px;
                padding: 10px 16px;
                font-size: 15px;
            }
            
            .main-menu, .difficulty-menu, .game-container, .game-screen, .bot-difficulty-menu {
                width: 90%;
                padding: 15px;
            }
            
            .difficulty-title {
                font-size: 1.1rem;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="main-menu" id="mainMenu">
        <h1 class="game-title">Tic Tac Two</h1>
        <div class="play-btn-container">
            <button class="btn btn-primary" id="playBtn">Play</button>
        </div>
        <div class="credit">
            <p>Ideas by Mario Ibrahim</p>
            <p>Game Programming by Mario Ibrahim</p>
            <p>TikTok:
            @bekindreal</p>
            <p class="rgb-text">Thanks For Playing</p>
        </div>
    </div>
    
    <div class="difficulty-menu" id="difficultyMenu" style="display: none;">
        <h1 class="game-title">Tic Tac Two</h1>
        <div class="btn-group">
            <button class="btn btn-primary" id="twoPlayerBtn">2 Player Mode</button>
            <button class="btn btn-secondary" id="botBtn">Play with Bot</button>
            <button class="btn btn-danger" id="backToMainBtn">Back to Main Menu</button>
        </div>
    </div>
    
    <div class="bot-difficulty-menu" id="botDifficultyMenu" style="display: none;">
        <h1 class="game-title">Tic Tac Two</h1>
        <div class="difficulty-title">Bot Difficulty</div>
        <div class="btn-group">
            <button class="difficulty-btn easy" id="easyBtn">Easy</button>
            <button class="difficulty-btn medium" id="mediumBtn">Medium</button>
            <button class="difficulty-btn hard" id="hardBtn">Hard</button>
            <button class="difficulty-btn nightmare" id="nightmareBtn">Nightmare</button>
            <button class="btn btn-danger" id="backToModeBtn">Back</button>
        </div>
    </div>
    
    <div class="game-screen" id="gameScreen">
        <h1 class="game-title">Tic Tac Two</h1>
        <div class="score-container">
            <div class="score score-x">X: <span id="scoreX">0</span></div>
            <div class="score score-o">O: <span id="scoreO">0</span></div>
        </div>
        <div class="status" id="status">Player X's turn</div>
        <div class="game-info" id="gameInfo"></div>
        <div class="board" id="board"></div>
        <div class="btn-group">
            <button class="btn btn-primary" id="restartBtn">Restart Game</button>
            <button class="btn btn-danger" id="menuBtn">Back to Main Menu</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const mainMenu = document.getElementById('mainMenu');
            const difficultyMenu = document.getElementById('difficultyMenu');
            const botDifficultyMenu = document.getElementById('botDifficultyMenu');
            const gameScreen = document.getElementById('gameScreen');
            const gameInfo = document.getElementById('gameInfo');
            const playBtn = document.getElementById('playBtn');
            const twoPlayerBtn = document.getElementById('twoPlayerBtn');
            const botBtn = document.getElementById('botBtn');
            const backToMainBtn = document.getElementById('backToMainBtn');
            const easyBtn = document.getElementById('easyBtn');
            const mediumBtn = document.getElementById('mediumBtn');
            const hardBtn = document.getElementById('hardBtn');
            const nightmareBtn = document.getElementById('nightmareBtn');
            const backToModeBtn = document.getElementById('backToModeBtn');
            const restartBtn = document.getElementById('restartBtn');
            const menuBtn = document.getElementById('menuBtn');
            const boardElement = document.getElementById('board');
            const statusElement = document.getElementById('status');
            const scoreXElement = document.getElementById('scoreX');
            const scoreOElement = document.getElementById('scoreO');
            
            // Game variables
            let board = ['', '', '', '', '', '', '', '', ''];
            let currentPlayer = 'X';
            let gameActive = true;
            let gameMode = '2player'; // '2player' or 'bot'
            let botDifficulty = 'easy'; // 'easy', 'medium', 'hard', 'nightmare'
            let isBotTurn = false;
            let lastStartingPlayer = 'O'; // Initialize with 'O' so first game starts with 'X'
            let scores = { X: 0, O: 0 };
            
            // Winning conditions
            const winningConditions = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];
            
            // Menu navigation
            playBtn.addEventListener('click', () => {
                mainMenu.style.display = 'none';
                difficultyMenu.style.display = 'flex';
            });
            
            twoPlayerBtn.addEventListener('click', () => {
                gameMode = '2player';
                startGame();
            });
            
            botBtn.addEventListener('click', () => {
                difficultyMenu.style.display = 'none';
                botDifficultyMenu.style.display = 'flex';
            });
            
            backToMainBtn.addEventListener('click', () => {
                difficultyMenu.style.display = 'none';
                mainMenu.style.display = 'flex';
            });
            
            easyBtn.addEventListener('click', () => {
                botDifficulty = 'easy';
                gameMode = 'bot';
                startGame();
            });
            
            mediumBtn.addEventListener('click', () => {
                botDifficulty = 'medium';
                gameMode = 'bot';
                startGame();
            });
            
            hardBtn.addEventListener('click', () => {
                botDifficulty = 'hard';
                gameMode = 'bot';
                startGame();
            });
            
            nightmareBtn.addEventListener('click', () => {
                botDifficulty = 'nightmare';
                gameMode = 'bot';
                startGame();
            });
            
            backToModeBtn.addEventListener('click', () => {
                botDifficultyMenu.style.display = 'none';
                difficultyMenu.style.display = 'flex';
            });
            
            menuBtn.addEventListener('click', () => {
                gameScreen.style.display = 'none';
                mainMenu.style.display = 'flex';
                // Reset scores when going back to main menu
                scores = { X: 0, O: 0 };
                updateScoreDisplay();
            });
            
            // Start the game
            function startGame() {
                difficultyMenu.style.display = 'none';
                botDifficultyMenu.style.display = 'none';
                gameScreen.style.display = 'flex';
                
                if (gameMode === 'bot') {
                    gameInfo.textContent = `Bot: ${botDifficulty.charAt(0).toUpperCase() + botDifficulty.slice(1)}`;
                } else {
                    gameInfo.textContent = "2 Player Mode";
                }
                
                initializeBoard();
            }
            
            // Initialize the board
            function initializeBoard() {
                boardElement.innerHTML = '';
                board = ['', '', '', '', '', '', '', '', ''];
                
                // Alternate starting player
                lastStartingPlayer = lastStartingPlayer === 'X' ? 'O' : 'X';
                currentPlayer = lastStartingPlayer;
                
                for (let i = 0; i < 9; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell', 'empty');
                    cell.setAttribute('data-index', i);
                    
                    // Add both click and touch events
                    cell.addEventListener('click', handleCellClick);
                    cell.addEventListener('touchend', handleCellClick, {passive: true});
                    
                    boardElement.appendChild(cell);
                }
                
                gameActive = true;
                isBotTurn = false;
                statusElement.textContent = `Player ${currentPlayer}'s turn`;
                
                // Remove any winning cell animations
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => cell.classList.remove('winning-cell'));
                
                // If playing with bot and bot goes first, make its move
                if (gameMode === 'bot' && currentPlayer === 'O') {
                    isBotTurn = true;
                    setTimeout(botMove, 500);
                }
            }
            
            // Handle cell click/touch
            function handleCellClick(event) {
                if (isBotTurn || !gameActive) return;
                
                const clickedCell = event.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));
                
                // If cell already used or game not active, ignore
                if (board[clickedCellIndex] !== '' || !gameActive) {
                    return;
                }
                
                // Update board and display
                makeMove(clickedCellIndex, clickedCell);
                
                // If playing with bot and game isn't over, let bot move
                if (gameMode === 'bot' && gameActive && !checkWin() && !checkDraw()) {
                    isBotTurn = true;
                    setTimeout(botMove, 500);
                }
            }
            // Make a move
            function makeMove(index, cellElement) {
                board[index] = currentPlayer;
                cellElement.classList.remove('empty');
                cellElement.classList.add(currentPlayer.toLowerCase());
                
                // Check for win or draw
                if (checkWin()) {
                    statusElement.textContent = `Player ${currentPlayer} wins!`;
                    gameActive = false;
                    highlightWinningCells();
                    createConfetti();
                    // Update score
                    scores[currentPlayer]++;
                    updateScoreDisplay();
                    return;
                } else if (checkDraw()) {
                    statusElement.textContent = "Game ended in a draw!";
                    gameActive = false;
                    return;
                }
                
                // Switch player
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                statusElement.textContent = `Player ${currentPlayer}'s turn`;
            }
            // Update score display
            function updateScoreDisplay() {
                scoreXElement.textContent = scores.X;
                scoreOElement.textContent = scores.O;
            }
            
            // Bot move logic
            function botMove() {
                if (!gameActive || !isBotTurn) return;
                
                let move;
                
                switch(botDifficulty) {
                    case 'easy':
                        move = getRandomMove();
                        break;
                    case 'medium':
                        move = Math.random() < 0.5 ? getWinningOrBlockingMove() : getRandomMove();
                        break;
                    case 'hard':
                        move = Math.random() < 0.8 ? getWinningOrBlockingMove() : getRandomMove();
                        break;
                    case 'nightmare':
                        move = getBestMove();
                        break;
                    default:
                        move = getRandomMove();
                }
                
                const cell = document.querySelector(`.cell[data-index="${move}"]`);
                makeMove(move, cell);
                isBotTurn = false;
            }
            
            // Get a random available move
            function getRandomMove() {
                const availableMoves = [];
                board.forEach((cell, index) => {
                    if (cell === '') availableMoves.push(index);
                });
                return availableMoves[Math.floor(Math.random() * availableMoves.length)];
            }
            
            // Get a winning or blocking move
            function getWinningOrBlockingMove() {
                // Check for winning move first
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    if (board[a] === currentPlayer && board[b] === currentPlayer && board[c] === '') return c;
                    if (board[a] === currentPlayer && board[c] === currentPlayer && board[b] === '') return b;
                    if (board[b] === currentPlayer && board[c] === currentPlayer && board[a] === '') return a;
                }
                
                // Check for blocking move
                const opponent = currentPlayer === 'X' ? 'O' : 'X';
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    if (board[a] === opponent && board[b] === opponent && board[c] === '') return c;
                    if (board[a] === opponent && board[c] === opponent && board[b] === '') return b;
                    if (board[b] === opponent && board[c] === opponent && board[a] === '') return a;
                }
                
                // If no winning/blocking move, get random
                return getRandomMove();
            }
            
            // Minimax algorithm for nightmare difficulty
            function getBestMove() {
                // 1. Try to win immediately
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    if (board[a] === currentPlayer && board[b] === currentPlayer && board[c] === '') return c;
                    if (board[a] === currentPlayer && board[c] === currentPlayer && board[b] === '') return b;
                    if (board[b] === currentPlayer && board[c] === currentPlayer && board[a] === '') return a;
                }
                
                // 2. Block opponent's winning move
                const opponent = currentPlayer === 'X' ? 'O' : 'X';
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    if (board[a] === opponent && board[b] === opponent && board[c] === '') return c;
                    if (board[a] === opponent && board[c] === opponent && board[b] === '') return b;
                    if (board[b] === opponent && board[c] === opponent && board[a] === '') return a;
                }
                
                // 3. Take center if available
                if (board[4] === '') return 4;
                
                // 4. Take a corner if available
                const corners = [0, 2, 6, 8];
                const availableCorners = corners.filter(index => board[index] === '');
                if (availableCorners.length > 0) {
                    return availableCorners[Math.floor(Math.random() * availableCorners.length)];
                }
                
                // 5. Take any available edge
                const edges = [1, 3, 5, 7];
                const availableEdges = edges.filter(index => board[index] === '');
                if (availableEdges.length > 0) {
                    return availableEdges[Math.floor(Math.random() * availableEdges.length)];
                }
                
                // Fallback to random move (shouldn't happen)
                return getRandomMove();
            }
            
            // Check for win
            function checkWin() {
                return winningConditions.some(condition => {
                    return condition.every(index => {
                        return board[index] === currentPlayer;
                    });
                });
            }
            
            // Check for draw
            function checkDraw() {
                return board.every(cell => cell !== '');
            }
            
            // Highlight winning cells
            function highlightWinningCells() {
                winningConditions.forEach(condition => {
                    if (condition.every(index => board[index] === currentPlayer)) {
                        condition.forEach(index => {
                            const cell = document.querySelector(`.cell[data-index="${index}"]`);
                            cell.classList.add('winning-cell');
                        });
                    }
                });
            }
            
            // Create confetti effect
            function createConfetti() {
                const colors = ['#ff6b6b', '#4ecdc4', '#ffe66d', '#ff9ff3', '#feca57', '#5f27cd'];
                
                for (let i = 0; i < 100; i++) {
                    const confetti = document.createElement('div');
                    confetti.classList.add('confetti');
                    
                    // Random properties
                    const size = Math.random() * 10 + 5;
                    const color = colors[Math.floor(Math.random() * colors.length)];
                    const left = Math.random() * 100;
                    const animationDuration = Math.random() * 3 + 2;
                    
                    confetti.style.width = `${size}px`;
                    confetti.style.height = `${size}px`;
                    confetti.style.backgroundColor = color;
                    confetti.style.left = `${left}%`;
                    confetti.style.top = '-10px';
                    confetti.style.animationDuration = `${animationDuration}s`;
                    confetti.style.animationDelay = `${Math.random() * 0.5}s`;
                    
                    document.body.appendChild(confetti);
                    
                    // Remove confetti after animation
                    setTimeout(() => {
                        confetti.remove();
                    }, animationDuration * 1000);
                }
            }
            
            // Restart game
            restartBtn.addEventListener('click', initializeBoard);
        });
    </script>
</body>
</html>
